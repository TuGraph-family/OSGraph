name: Build and Deploy

on:
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: 安装 Node.js 和 pnpm 环境
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      # Step 3: 构建前端代码
      - name: Build frontend
        working-directory: ./osgraph-web
        run: |
          pnpm install
          pnpm run build

      # Step 4: 配置 SSH 密钥
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 5: 压缩并上传前端构建产物到服务器
      - name: Deploy frontend
        env:
          DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH_FRONTEND: ${{ secrets.DEPLOY_PATH_FRONTEND }}
        run: |
          # 压缩前端构建产物
          tar -czf osgraph-web-dist.tar.gz -C ./osgraph-web/dist .
          # 上传压缩包到服务器
          scp -o StrictHostKeyChecking=no osgraph-web-dist.tar.gz $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH_FRONTEND
          # 解压并清理压缩包
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_SERVER << EOF
          set -e
          tar -xzf $DEPLOY_PATH_FRONTEND/osgraph-web-dist.tar.gz -C $DEPLOY_PATH_FRONTEND --strip-components=0
          rm $DEPLOY_PATH_FRONTEND/osgraph-web-dist.tar.gz
          EOF

      # Step 6: 压缩并上传后端代码到服务器
      - name: Deploy backend
        env:
          DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH_BACKEND: ${{ secrets.DEPLOY_PATH_BACKEND }}
        run: |
          # 压缩后端代码
          tar -czf osgraph-service-py.tar.gz -C ./osgraph-service-py .
          # 上传压缩包到服务器
          scp -o StrictHostKeyChecking=no osgraph-service-py.tar.gz $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH_BACKEND
          # 解压并清理压缩包，安装依赖并重启服务
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_SERVER << EOF
          set -e
          cd $DEPLOY_PATH_BACKEND
          tar -xzf osgraph-service-py.tar.gz --strip-components=0
          rm osgraph-service-py.tar.gz
          source ~/.bashrc
          poetry install
          lsof -ti:8000 | xargs kill -9 || true
          nohup poetry run gunicorn -w 4 -b 0.0.0.0:8000 run:app > gunicorn.log 2>&1 &
          EOF
